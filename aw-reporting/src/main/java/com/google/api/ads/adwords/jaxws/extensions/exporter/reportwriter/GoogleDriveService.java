// Copyright 2013 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.api.ads.adwords.jaxws.extensions.exporter.reportwriter;

import com.google.api.ads.adwords.jaxws.extensions.authentication.Authenticator;
import com.google.api.ads.common.lib.exception.OAuthException;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.Maps;
import com.google.api.services.drive.Drive;
import com.google.api.services.drive.Drive.Files;
import com.google.api.services.drive.model.File;
import com.google.api.services.drive.model.FileList;

import org.apache.log4j.Logger;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

/**
 * Provides an authenticated Google {@link Drive} service instance configured for AW Reports to DB.
 *   
 * @author joeltoby@google.com (Joel Toby)
 * @author jtoledo@google.com (Julian Toledo)
 *
 */
public class GoogleDriveService {

  private static final Logger LOGGER = Logger.getLogger(GoogleDriveService.class);

  private static HashMap<Authenticator, GoogleDriveService> googleDriveServiceHash = Maps.newHashMap();

  private final String REPORT_FOLDER_NAME_PRE = "AW Reports - AdWords generated PDF Reports";

  private final String FOLDER_MIME_TYPE = "application/vnd.google-apps.folder";

  private Drive service;

  /**
   * Contruscts the GoogleDriveService for the Authenticator
   * It stores GoogleDriveService in a hash for reusability.
   */
  private GoogleDriveService(Authenticator authenticator) throws OAuthException {
    this.service =  new Drive.Builder(new NetHttpTransport(), new JacksonFactory(),
        authenticator.getOAuth2Credential()).setApplicationName("AW Reports to DB").build();    

    googleDriveServiceHash.put(authenticator, this);
  }

  /**
   * Gets a single GoogleDriveService instance per Authenticator
   */
  public static synchronized GoogleDriveService getGoogleDriveService(Authenticator authenticator) throws OAuthException {
    GoogleDriveService googleDriveService = googleDriveServiceHash.get(authenticator);
    if (googleDriveService == null) {
      googleDriveService = new GoogleDriveService(authenticator);
    }
    return googleDriveService;
  }

  /**
   * Gets the Drive instace for the GoogleDriveService
   */
  public Drive getDriveService() {
    return service;
  }

  /**
   * Gets the AW Reports Google Drive folder. If one does not exist, it will be created.
   * @throws IOException
   */
  public synchronized File getReportsFolder(String mccAccountId) throws IOException {
    String reportFolderName = REPORT_FOLDER_NAME_PRE + ": " + mccAccountId;

    // Check if the folder exists
    List<File> results = new ArrayList<File>();
    LOGGER.info("Building find folder query");
    Files.List request = service.files().list()
        .setQ("title= '" + reportFolderName + "' and mimeType='" 
         + FOLDER_MIME_TYPE +"' and trashed = false");
    LOGGER.info("Executing find folder query");
    FileList files = request.execute();
    LOGGER.info("Number of results from query: " + files.size());
    results.addAll(files.getItems());

    if(!results.isEmpty()) {
      // Found the existing folder
      return results.get(0);

    } else {
      // Folder does not exist. Create it.
      LOGGER.info("Creating folder");
      File reportsFolder = new File();
      reportsFolder.setTitle(reportFolderName);
      reportsFolder.setMimeType(FOLDER_MIME_TYPE);
      reportsFolder.setDescription("Contains AdWords Reports generated by AwReporting");

      LOGGER.info("Executing create folder");
      return service.files().insert(reportsFolder).execute();
    }
  }
}