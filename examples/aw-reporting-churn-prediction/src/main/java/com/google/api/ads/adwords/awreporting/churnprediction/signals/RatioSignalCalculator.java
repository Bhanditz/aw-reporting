package com.google.api.ads.adwords.awreporting.churnprediction.signals;

import com.google.api.ads.adwords.awreporting.churnprediction.annotations.RatioSignal;
import com.google.api.ads.adwords.awreporting.model.entities.ReportAccount;
import com.google.api.ads.adwords.awreporting.model.entities.ReportBase;
import com.google.api.ads.adwords.awreporting.model.util.DateUtil;

import org.apache.commons.beanutils.PropertyUtils;
import org.joda.time.DateTime;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.math.BigDecimal;
import java.util.List;

/**
 * TODO: Insert description here. (generated by gustavomoreira)
 */
public class RatioSignalCalculator implements SignalCalculator {
  private int firstDay;
  private int secondDay;

  private int firstMonth;
  private int secondMonth;

  private String propertyName;

  public RatioSignalCalculator(RatioSignal ratioSignal) {
    this.firstDay = ratioSignal.firstDay();
    this.secondDay = ratioSignal.secondDay();
    this.firstMonth = ratioSignal.firstMonth();
    this.secondMonth = ratioSignal.secondMonth();
    this.propertyName = ratioSignal.property();
  }

  @Override
  public Object calculateValueForAccount(List<ReportAccount> dataRows, Field field)
      throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
    Number accumulatedFirstValue = null;
    Number accumulatedSecondValue = null;
    DateTime firstDate = null;

    for (ReportBase report : dataRows) {
      DateTime dateTime = DateUtil.parseDateTime(report.getDay());
      if (firstDate == null) {
        firstDate = dateTime;
      }

      if (this.secondDay > 0 && dateTime.plusDays(this.secondDay - 1).isBefore(firstDate)) {
        break;
      } else if (this.secondMonth > 0
          && dateTime.plusMonths(this.secondMonth - 1).isBefore(firstDate)) {
        break;
      }

      Object propertyValue = PropertyUtils.getProperty(report, this.propertyName);
      Class propertyType = PropertyUtils.getPropertyType(report, this.propertyName);
      if (String.class.isAssignableFrom(propertyType)) {
        if (this.firstDay > 0 && !dateTime.plusDays(this.firstDay - 1).isBefore(firstDate)) {
          accumulatedFirstValue =
              this.addAsBigDecimal(accumulatedFirstValue, new BigDecimal((String) propertyValue));
        } else if (this.firstMonth > 0
            && !dateTime.plusMonths(this.firstMonth - 1).isBefore(firstDate)) {
          accumulatedFirstValue =
              this.addAsBigDecimal(accumulatedFirstValue, new BigDecimal((String) propertyValue));
        }
        accumulatedSecondValue =
            this.addAsBigDecimal(accumulatedSecondValue, new BigDecimal((String) propertyValue));
      } else if (Long.class.isAssignableFrom(propertyType)) {
        if (this.firstDay > 0 && !dateTime.plusDays(this.firstDay - 1).isBefore(firstDate)) {
          accumulatedFirstValue = this.addAsLong(accumulatedFirstValue, (Long) propertyValue);
        } else if (this.firstMonth > 0
            && !dateTime.plusMonths(this.firstMonth - 1).isBefore(firstDate)) {
          accumulatedFirstValue = this.addAsLong(accumulatedFirstValue, (Long) propertyValue);
        }
        accumulatedSecondValue = this.addAsLong(accumulatedSecondValue, (Long) propertyValue);
      }
    }
    if (accumulatedFirstValue == null || accumulatedSecondValue == null) {
      return SignalProcessor.INVALID_DOUBLE_SIGNAL;
    }
    return accumulatedFirstValue.doubleValue() / accumulatedSecondValue.doubleValue();
  }

  /**
   * @param accumulatedValue
   * @param propertyValue
   * @return
   */
  private Number addAsLong(Number accumulatedValue, Long propertyValue) {
    if (accumulatedValue == null) {
      return propertyValue;
    } else if (propertyValue == null) {
      return accumulatedValue;
    }
    return accumulatedValue.longValue() + propertyValue;
  }

  /**
   * @param accumulatedValue
   * @param propertyValue
   * @return
   */
  private Number addAsBigDecimal(Number accumulatedValue, BigDecimal propertyValue) {
    if (accumulatedValue == null) {
      return propertyValue;
    } else if (propertyValue == null) {
      return accumulatedValue;
    }
    return propertyValue.add((BigDecimal) accumulatedValue);
  }
}
