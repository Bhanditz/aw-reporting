package com.google.api.ads.adwords.awreporting.churnprediction.signals;

import com.google.api.ads.adwords.awreporting.churnprediction.annotations.AccumulatedSignal;
import com.google.api.ads.adwords.awreporting.churnprediction.annotations.AverageSignal;
import com.google.api.ads.adwords.awreporting.churnprediction.annotations.RatioSignal;
import com.google.api.ads.adwords.awreporting.churnprediction.db.DatabaseManager;
import com.google.api.ads.adwords.awreporting.churnprediction.entities.AccountSignals;
import com.google.api.ads.adwords.awreporting.model.entities.ReportAccount;
import com.google.api.ads.adwords.awreporting.model.entities.ReportKeywords;

import org.apache.commons.beanutils.PropertyUtils;
import org.joda.time.DateTime;
import org.joda.time.Days;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

/**
 * TODO: Insert description here. (generated by gustavomoreira)
 */
@Component
public class SignalProcessor {
  public static final double INVALID_DOUBLE_SIGNAL = -1.0;
  public static final long INVALID_LONG_SIGNAL = -1L;
  public static final int INVALID_INTEGER_SIGNAL = -1;

  @Autowired
  private KeywordsSignalsCalculator keywordsSignalsCalculator;

  @Autowired
  private DatabaseManager databaseReportReader;

  public AccountSignals createSignalsForAccount(
      long accountId, DateTime startDate, DateTime endDate) throws Exception {
    AccountSignals signals = new AccountSignals();

    List<ReportAccount> accountData =
        this.databaseReportReader.listAccountsForPastDays(accountId, startDate, endDate);
    this.fillOutSignalsForAccount(signals, accountData);

    List<ReportKeywords> keywordData =
        this.databaseReportReader.listKeywordsData(accountId, startDate);
    this.fillOutSignalsForKeywords(signals, keywordData);

    this.fillOutStatsFields(accountId, startDate, signals);

    return signals;
  }


  public void fillOutSignalsForAccount(Object accountSignals, List<ReportAccount> accountData)
      throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
    Field[] fields = accountSignals.getClass().getDeclaredFields();
    for (int i = 0; i < fields.length; i++) {
      Field field = fields[i];

      SignalCalculator calculator = null;

      if (field.isAnnotationPresent(AccumulatedSignal.class)) {
        AccumulatedSignal accumulatedSignal = field.getAnnotation(AccumulatedSignal.class);
        calculator = new AccumulatedSignalCalculator(accumulatedSignal);

      } else if (field.isAnnotationPresent(RatioSignal.class)) {
        RatioSignal ratioSignal = field.getAnnotation(RatioSignal.class);
        calculator = new RatioSignalCalculator(ratioSignal);

      } else if (field.isAnnotationPresent(AverageSignal.class)) {
        AverageSignal averageSignal = field.getAnnotation(AverageSignal.class);
        calculator = new AverageSignalCalculator(averageSignal);
      }

      if (calculator != null) {
        Object propertyValue = calculator.calculateValueForAccount(accountData, field);
        PropertyUtils.setProperty(accountSignals, field.getName(), propertyValue);
      }
    }
  }

  public void fillOutSignalsForKeywords(
      AccountSignals accountSignals, List<ReportKeywords> keywordData) {
    this.keywordsSignalsCalculator.fillOutKeywordSignalsFields(accountSignals, keywordData);
  }

  public void fillOutStatsFields(long accountId, DateTime day, AccountSignals accountSignals) {
    int activeAdGroups = this.databaseReportReader.countActiveAdGroups(accountId, day);
    int activeAds = this.databaseReportReader.countActiveAds(accountId, day);
    int activeCampaigns = this.databaseReportReader.countActiveCampaigns(accountId, day);
    int activeKeywords = this.databaseReportReader.countActiveKeywords(accountId, day);

    DateTime lastImpression = this.databaseReportReader.retrieveLastGreaterThanZeroOcurrency(
        accountId, day, "impressions");
    DateTime lastClick =
        this.databaseReportReader.retrieveLastGreaterThanZeroOcurrency(accountId, day, "clicks");
    DateTime lastSpend =
        this.databaseReportReader.retrieveLastGreaterThanZeroOcurrency(accountId, day, "cost");


    accountSignals.setAdgroupsCount(activeAdGroups);
    accountSignals.setCreativeCount(activeAds);
    accountSignals.setCampaignCount(activeCampaigns);
    accountSignals.setActiveKeywordCount(activeKeywords);

    accountSignals.setAdGroupToCampaignRatio(((double) activeAdGroups / (double) activeCampaigns));
    accountSignals.setKeywordToAdGroupRatio(((double) activeKeywords / (double) activeAdGroups));
    accountSignals.setCreativeToAdGroupRatio(((double) activeAds / (double) activeAdGroups));
    accountSignals.setcreativeToCampaignRatio(((double) activeAds / (double) activeCampaigns));

    if (lastImpression != null) {
      accountSignals.setLastImpression(
          Days.daysBetween(day.toLocalDate(), lastImpression.toLocalDate()).getDays());
    } else {
      accountSignals.setLastImpression(INVALID_INTEGER_SIGNAL);
    }

    if (lastClick != null) {
      accountSignals.setLastClick(
          Days.daysBetween(day.toLocalDate(), lastClick.toLocalDate()).getDays());
    } else {
      accountSignals.setLastClick(INVALID_INTEGER_SIGNAL);
    }

    if (lastSpend != null) {
      accountSignals.setLastSpend(
          Days.daysBetween(day.toLocalDate(), lastSpend.toLocalDate()).getDays());
    } else {
      accountSignals.setLastSpend(INVALID_INTEGER_SIGNAL);
    }
  }
}
