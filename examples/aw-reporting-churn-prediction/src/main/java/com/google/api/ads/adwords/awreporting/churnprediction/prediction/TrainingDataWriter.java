package com.google.api.ads.adwords.awreporting.churnprediction.prediction;

import com.google.api.ads.adwords.awreporting.churnprediction.annotations.ExcludeFromTraining;
import com.google.api.ads.adwords.awreporting.churnprediction.entities.Signals;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

import au.com.bytecode.opencsv.CSVWriter;

import org.apache.commons.beanutils.PropertyUtils;

import java.io.Closeable;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.util.List;
import java.util.Map;

import javax.persistence.Column;

/**
 * TODO: Insert description here. (generated by jimper)
 */
public class TrainingDataWriter implements Closeable {
  private final CSVWriter csvWriter;
  private final Writer outputWriter;

  public TrainingDataWriter(File outputFile) throws IOException {
    this(new FileWriter(outputFile));
  }

  public TrainingDataWriter(Writer outputWriter) {
    this.outputWriter = outputWriter;
    csvWriter = new CSVWriter(this.outputWriter);
  }

  public void addSignals(String status, Signals signals) throws IllegalAccessException,
      InvocationTargetException, NoSuchMethodException {
    // Sort values by field name to keep the training data consistently ordered.
    Map<String, String> fieldToValueMap = Maps.newTreeMap();

    for(Field field : signals.getClass().getDeclaredFields()) {
      // Only add values from columns that are not explicitly excluded from training.
      if(field.isAnnotationPresent(Column.class) &&
          !field.isAnnotationPresent(ExcludeFromTraining.class)) {
        fieldToValueMap.put(field.getName(),
            String.valueOf(PropertyUtils.getProperty(signals, field.getName())));
      }
    }

    // Ensure status is always the first entry in each row.
    List<String> values = Lists.newArrayList(status);
    values.addAll(fieldToValueMap.values());

    csvWriter.writeNext(values.toArray(new String[values.size()]));
  }

  /* (non-Javadoc)
   * @see java.io.Closeable#close()
   */
  @Override
  public void close() throws IOException {
    outputWriter.close();
    csvWriter.close();
  }
}

