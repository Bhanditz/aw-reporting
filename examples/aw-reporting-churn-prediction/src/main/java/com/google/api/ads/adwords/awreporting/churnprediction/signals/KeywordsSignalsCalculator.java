package com.google.api.ads.adwords.awreporting.churnprediction.signals;

import com.google.api.ads.adwords.awreporting.churnprediction.entities.AccountSignals;
import com.google.api.ads.adwords.awreporting.model.entities.ReportKeywords;

import org.springframework.stereotype.Component;

import java.math.BigDecimal;
import java.util.List;

/**
 * TODO: Insert description here. (generated by gustavomoreira)
 *
 * ASSUMING THAT THERE IS ONE ROW PER KEYWORD
 */
@Component
public class KeywordsSignalsCalculator {
  /**
   * @param accountSignals
   * @param keywordData
   */
  public void fillOutKeywordSignalsFields(
      AccountSignals accountSignals, List<ReportKeywords> keywordData) {
    double maxMaxCpc = 0.0;

    int[] keywordScoresCount = new int[11];
    double accumulatedQs = 0.0;
    for (ReportKeywords reportKeywords : keywordData) {
      Integer qs = reportKeywords.getQualityScore();
      if (qs != null) {
        keywordScoresCount[qs]++;
        accumulatedQs += qs;
      }

      BigDecimal maxCpc = reportKeywords.getMaxCpc();
      if (maxCpc != null & maxCpc.doubleValue() > maxMaxCpc) {
        maxMaxCpc = maxCpc.doubleValue();
      }
    }

    int keywordCount = keywordData.size();

    accountSignals.setActiveKeywordCount(keywordCount);
    accountSignals.setKeywordMaxCpcMax(maxMaxCpc);
    accountSignals.setAvgQualityScore(accumulatedQs / keywordCount);
    accountSignals.setKwScore0Percent(((double) keywordScoresCount[0]) / ((double) keywordCount));
    accountSignals.setKwScore1Percent(((double) keywordScoresCount[1]) / ((double) keywordCount));
    accountSignals.setKwScore2Percent(((double) keywordScoresCount[2]) / ((double) keywordCount));
    accountSignals.setKwScore3Percent(((double) keywordScoresCount[3]) / ((double) keywordCount));
    accountSignals.setKwScore4Percent(((double) keywordScoresCount[4]) / ((double) keywordCount));
    accountSignals.setKwScore5Percent(((double) keywordScoresCount[5]) / ((double) keywordCount));
    accountSignals.setKwScore6Percent(((double) keywordScoresCount[6]) / ((double) keywordCount));
    accountSignals.setKwScore7Percent(((double) keywordScoresCount[7]) / ((double) keywordCount));
    accountSignals.setKwScore8Percent(((double) keywordScoresCount[8]) / ((double) keywordCount));
    accountSignals.setKwScore9Percent(((double) keywordScoresCount[9]) / ((double) keywordCount));
    accountSignals.setKwScore10Percent(((double) keywordScoresCount[10]) / ((double) keywordCount));


    int lowQsCount =
        keywordScoresCount[0] + keywordScoresCount[1] + keywordScoresCount[2]
        + keywordScoresCount[3] + keywordScoresCount[4] + keywordScoresCount[5];
    accountSignals.setKeywordLowQsRatio(((double) lowQsCount) / ((double) keywordCount));
  }
}
