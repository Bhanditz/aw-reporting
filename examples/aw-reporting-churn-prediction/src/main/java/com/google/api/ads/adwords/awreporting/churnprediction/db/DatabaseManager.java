package com.google.api.ads.adwords.awreporting.churnprediction.db;

import com.google.api.ads.adwords.awreporting.churnprediction.entities.AccountSignals;
import com.google.api.ads.adwords.awreporting.churnprediction.entities.AccountStatus;
import com.google.api.ads.adwords.awreporting.model.entities.ReportAccount;
import com.google.api.ads.adwords.awreporting.model.entities.ReportAd;
import com.google.api.ads.adwords.awreporting.model.entities.ReportAdGroup;
import com.google.api.ads.adwords.awreporting.model.entities.ReportBase;
import com.google.api.ads.adwords.awreporting.model.entities.ReportCampaign;
import com.google.api.ads.adwords.awreporting.model.entities.ReportKeywords;

import org.hibernate.Criteria;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.hibernate.transform.Transformers;
import org.joda.time.DateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * TODO: Insert description here. (generated by gustavomoreira)
 */
@Component
public class DatabaseManager {
  @Autowired
  private SessionFactory sessionFactory;

  @Transactional
  @SuppressWarnings("unchecked")
  public List<ReportAccount> listAccountsForPastDays(
      long accountId, DateTime startDate, DateTime endDate) {
    Criteria criteria = this.sessionFactory.getCurrentSession().createCriteria(ReportAccount.class);

    criteria.addOrder(Order.desc("day"))
        .add(Restrictions.between("date", startDate.toDate(), endDate.toDate()))
        .add(Restrictions.eq("accountId", accountId))
        .setProjection(
            Projections.projectionList()
                .add(Projections.sum("impressions"))
                .add(Projections.sum("clicks"))
                .add(Projections.sum("cost"))
                .add(Projections.avg("ctr"))
                .add(Projections.avg("avgPosition"))
                .add(Projections.avg("avgCpc"))
                .add(Projections.avg("avgCpm"))
                .add(Projections.avg("clickConversionRate"))
                .add(Projections.groupProperty("day")))
        .setResultTransformer(Transformers.aliasToBean(ReportAccount.class));

    return criteria.list();
  }

  @Transactional
  @SuppressWarnings("unchecked")
  public List<AccountStatus> listAccountsStatus() {
    Criteria criteria = this.sessionFactory.getCurrentSession().createCriteria(AccountStatus.class);

    return criteria.list();
  }

  @Transactional
  public void saveAccountSignals(AccountSignals signals) {
    this.sessionFactory.getCurrentSession().saveOrUpdate(signals);
  }

  @Transactional
  public void saveSignals(AccountSignals accountSignals) {
    this.sessionFactory.getCurrentSession().persist(accountSignals);
  }

  @Transactional
  @SuppressWarnings("unchecked")
  public List<ReportKeywords> listKeywordsData(long accountId, DateTime day) {
    Criteria criteria =
        this.sessionFactory.getCurrentSession().createCriteria(ReportKeywords.class);

    criteria.addOrder(Order.desc("day"))
        .add(Restrictions.eq("date", day.toDate()))
        .add(Restrictions.eq("accountId", accountId))
        .setProjection(
            Projections.projectionList()
                .add(Projections.property("qualityScore"))
                .add(Projections.max("maxCpc"))
                .add(Projections.groupProperty("day")))
        .setResultTransformer(Transformers.aliasToBean(ReportKeywords.class));

    return criteria.list();
  }

  private int runCountQuery(Class<? extends ReportBase> reportType, long accountId, DateTime day,
      String distinctProperty, String statusProperty) {
    Criteria criteria = this.sessionFactory.getCurrentSession().createCriteria(reportType);

    criteria.add(Restrictions.eq("date", day.toDate()))
        .add(Restrictions.eq("accountId", accountId))
        .add(Restrictions.eq(statusProperty, "enabled"))
        .setProjection(Projections.countDistinct(distinctProperty));

    return (int) criteria.list().get(0);
  }

  @Transactional
  public DateTime retrieveLastGreaterThanZeroOcurrency(
      long accountId, DateTime date, String field) {
    Criteria criteria = this.sessionFactory.getCurrentSession().createCriteria(ReportAccount.class);
    criteria.addOrder(Order.desc("day"))
        .add(Restrictions.ge("date", date.toDate()))
        .add(Restrictions.eq("accountId", accountId))
        .add(Restrictions.gt(field, 0))
        .setProjection(Projections.property("date"))
        .setMaxResults(1);

    Object instant = criteria.list().get(0);
    if (instant == null) {
      return null;
    }
    return new DateTime(instant);
  }

  @Transactional
  public int countActiveCampaigns(long accountId, DateTime day) {
    return this.runCountQuery(ReportCampaign.class, accountId, day, "campaignId", "campaignStatus");
  }

  @Transactional
  public int countActiveAdGroups(long accountId, DateTime day) {
    return this.runCountQuery(ReportAdGroup.class, accountId, day, "adGroupId", "adGroupStatus");
  }

  @Transactional
  public int countActiveAds(long accountId, DateTime day) {
    return this.runCountQuery(ReportAd.class, accountId, day, "adId", "adState");
  }

  @Transactional
  public int countActiveKeywords(long accountId, DateTime day) {
    return this.runCountQuery(ReportKeywords.class, accountId, day, "keywordId", "status");
  }
}
