package com.google.api.ads.adwords.awreporting.churnprediction.signals;

import com.google.api.ads.adwords.awreporting.model.entities.ReportAccount;

import junit.framework.Assert;

import org.joda.time.DateTime;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.lang.reflect.InvocationTargetException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * TODO: Insert description here. (generated by gustavomoreira)
 */
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration("classpath:aw-report-churn-prediction-test-beans.xml")
public class SignalProcessorTest {
  @Autowired
  private SignalProcessor processor;


  @Test
  public void testProcessorCalculation()
      throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
    List<ReportAccount> rows = new ArrayList<>();

    ReportAccount row = new ReportAccount();
    row.setDay(new DateTime(2015, 7, 3, 12, 0));
    row.setImpressions(1000L);
    row.setCtr(new BigDecimal(1000));
    rows.add(row);

    row = new ReportAccount();
    row.setDay(new DateTime(2015, 7, 2, 12, 0));
    row.setImpressions(13L);
    row.setCtr(new BigDecimal(13));
    rows.add(row);

    row = new ReportAccount();
    row.setDay(new DateTime(2015, 7, 1, 12, 0));
    row.setImpressions(5L);
    row.setCtr(new BigDecimal(5));
    rows.add(row);

    row = new ReportAccount();
    row.setDay(new DateTime(2015, 6, 5, 12, 0));
    row.setImpressions(100L);
    row.setCtr(new BigDecimal(100));
    rows.add(row);

    row = new ReportAccount();
    row.setDay(new DateTime(2015, 6, 6, 12, 0));
    row.setImpressions(500L);
    row.setCtr(new BigDecimal(50));
    rows.add(row);

    row = new ReportAccount();
    row.setDay(new DateTime(2015, 6, 4, 12, 0));
    row.setImpressions(7L);
    row.setCtr(new BigDecimal(7));
    rows.add(row);

    row = new ReportAccount();
    row.setDay(new DateTime(2015, 6, 3, 12, 0));
    row.setImpressions(11L);
    row.setCtr(new BigDecimal(11));
    rows.add(row);

    row = new ReportAccount();
    row.setDay(new DateTime(2015, 6, 2, 12, 0));
    row.setImpressions(10L);
    row.setCtr(new BigDecimal(10));
    rows.add(row);


    DummySignalClass accountSignals = new DummySignalClass();
    this.processor.fillOutSignalsForAccount(accountSignals, rows);

    Assert.assertEquals(1018L, accountSignals.getLongValue());

    Assert.assertEquals(1636, accountSignals.getIntValue());

    Assert.assertEquals(1018.0, accountSignals.getDoubleValue());
  }

  @Test
  public void testRatioSignals()
      throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
    List<ReportAccount> rows = new ArrayList<>();

    ReportAccount row = new ReportAccount();
    row.setDay(new DateTime(2015, 7, 3, 12, 0));
    row.setImpressions(10L);
    row.setCtr(new BigDecimal(10));
    rows.add(row);

    row = new ReportAccount();
    row.setDay(new DateTime(2015, 7, 2, 12, 0));
    row.setImpressions(13L);
    row.setCtr(new BigDecimal(13));
    rows.add(row);

    row = new ReportAccount();
    row.setDay(new DateTime(2015, 7, 1, 12, 0));
    row.setImpressions(5L);
    row.setCtr(new BigDecimal(5));
    rows.add(row);

    row = new ReportAccount();
    row.setDay(new DateTime(2015, 6, 6, 12, 0));
    row.setImpressions(500L);
    row.setCtr(new BigDecimal(50));
    rows.add(row);

    row = new ReportAccount();
    row.setDay(new DateTime(2015, 6, 5, 12, 0));
    row.setImpressions(100L);
    row.setCtr(new BigDecimal(100));
    rows.add(row);

    row = new ReportAccount();
    row.setDay(new DateTime(2015, 6, 4, 12, 0));
    row.setImpressions(7L);
    row.setCtr(new BigDecimal(7));
    rows.add(row);

    row = new ReportAccount();
    row.setDay(new DateTime(2015, 6, 3, 12, 0));
    row.setImpressions(11L);
    row.setCtr(new BigDecimal(11));
    rows.add(row);

    row = new ReportAccount();
    row.setDay(new DateTime(2015, 6, 2, 12, 0));
    row.setImpressions(10L);
    row.setCtr(new BigDecimal(10));
    rows.add(row);

    DummySignalClass accountSignals = new DummySignalClass();
    this.processor.fillOutSignalsForAccount(accountSignals, rows);

    Assert.assertEquals(0.821428571, accountSignals.getDoubleValue2(), 0.000001);
  }

  @Test
  public void testAverageSignals()
      throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
    List<ReportAccount> rows = new ArrayList<>();

    ReportAccount row = new ReportAccount();
    row.setDay(new DateTime(2015, 7, 3, 12, 0));
    row.setCtr(new BigDecimal(12));
    rows.add(row);

    row = new ReportAccount();
    row.setDay(new DateTime(2015, 7, 2, 12, 0));
    row.setCtr(new BigDecimal(13));
    rows.add(row);

    row = new ReportAccount();
    row.setDay(new DateTime(2015, 7, 1, 12, 0));
    row.setCtr(new BigDecimal(5));
    rows.add(row);

    row = new ReportAccount();
    row.setDay(new DateTime(2015, 6, 6, 12, 0));
    row.setCtr(new BigDecimal(50));
    rows.add(row);

    row = new ReportAccount();
    row.setDay(new DateTime(2015, 6, 5, 12, 0));
    row.setCtr(new BigDecimal(100));
    rows.add(row);

    row = new ReportAccount();
    row.setDay(new DateTime(2015, 6, 4, 12, 0));
    row.setCtr(new BigDecimal(7));
    rows.add(row);

    row = new ReportAccount();
    row.setDay(new DateTime(2015, 6, 3, 12, 0));
    row.setCtr(new BigDecimal(11));
    rows.add(row);

    row = new ReportAccount();
    row.setDay(new DateTime(2015, 6, 2, 12, 0));
    row.setCtr(new BigDecimal(1000));
    rows.add(row);

    DummySignalClass accountSignals = new DummySignalClass();
    this.processor.fillOutSignalsForAccount(accountSignals, rows);

    Assert.assertEquals(28.285714286, accountSignals.getDoubleValue3(), 0.00001);
  }
}
