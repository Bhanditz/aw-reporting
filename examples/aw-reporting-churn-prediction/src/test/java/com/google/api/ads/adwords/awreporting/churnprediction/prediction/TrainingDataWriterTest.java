package com.google.api.ads.adwords.awreporting.churnprediction.prediction;

import com.google.api.ads.adwords.awreporting.churnprediction.entities.AccountStatus;
import com.google.api.ads.adwords.awreporting.churnprediction.signals.DummySignalClass;
import com.google.common.collect.Lists;

import au.com.bytecode.opencsv.CSVParser;

import junit.framework.Assert;

import org.apache.commons.lang.RandomStringUtils;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.io.IOException;
import java.io.StringWriter;
import java.lang.reflect.InvocationTargetException;
import java.util.List;
import java.util.Random;

/**
 * TODO: Insert description here. (generated by jimper)
 */
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration("classpath:aw-report-churn-prediction-test-beans.xml")
public class TrainingDataWriterTest {
  private final String accountStatus1 = AccountStatus.ACTIVE;
  private final String accountStatus2 = AccountStatus.CHURNED;

  private final List<String[]> outputCsvs = Lists.newArrayList();

  private DummySignalClass signals1;
  private DummySignalClass signals2;

  @Before
  public void setup() throws IllegalAccessException, InvocationTargetException,
      NoSuchMethodException, IOException {
    signals1 = generateDummySignals();
    signals2 = generateDummySignals();

    StringWriter sWriter = new StringWriter();
    try (TrainingDataWriter tWriter = new TrainingDataWriter(sWriter)) {
      tWriter.addSignals(accountStatus1, signals1);
      tWriter.addSignals(accountStatus2, signals2);
    }

    CSVParser parser = new CSVParser();
    for(String csv : sWriter.toString().trim().split("\n")) {
      outputCsvs.add(parser.parseLine(csv));
    }
  }

  @Test
  public void testRowCount() {
    Assert.assertTrue(outputCsvs.size() == 2);
  }

  @Test
  public void testColumnCount() {
    Assert.assertTrue(outputCsvs.get(0).length == 8);
    Assert.assertTrue(outputCsvs.get(1).length == 8);
  }

  @Test
  public void testColumnOrder() {
    validateColumnValues(accountStatus1, signals1, outputCsvs.get(0));
    validateColumnValues(accountStatus2, signals2, outputCsvs.get(1));
  }

  private void validateColumnValues(String status, DummySignalClass signals, String[] values) {
    Assert.assertEquals(status, values[0]);
    Assert.assertEquals(String.valueOf(signals.getDoubleValue()), values[1]);
    Assert.assertEquals(String.valueOf(signals.getDoubleValue2()), values[2]);
    Assert.assertEquals(String.valueOf(signals.getDoubleValue3()), values[3]);
    Assert.assertEquals(String.valueOf(signals.getIntValue()), values[4]);
    Assert.assertEquals(String.valueOf(signals.getIntValue2()), values[5]);
    Assert.assertEquals(String.valueOf(signals.getLongValue()), values[6]);
    Assert.assertEquals(String.valueOf(signals.getLongValue2()), values[7]);
  }

  private DummySignalClass generateDummySignals() {
    Random rand = new Random();

    DummySignalClass signals = new DummySignalClass();
    signals.setDoubleValue(rand.nextDouble());
    signals.setDoubleValue2(rand.nextDouble());
    signals.setDoubleValue3(rand.nextDouble());
    signals.setIntValue(rand.nextInt());
    signals.setIntValue2(rand.nextInt());
    signals.setLongValue(rand.nextLong());
    signals.setLongValue2(rand.nextLong());
    signals.setTestString(RandomStringUtils.random(10));

    return signals;
  }
}
